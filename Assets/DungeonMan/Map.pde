class Map
{
  int[] mapList;
  int[][] stageList = {
  //{
  //99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,
  //99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,
  //99,0,99,99,99,0,99,99,99,0,99,0,99,0,99,99,99,0,99,99,99,0,99,
  //99,0,99,0,99,0,99,0,0,0,99,0,99,0,99,0,0,0,99,0,99,0,99,
  //99,0,99,0,99,0,99,99,99,0,99,0,99,0,99,99,99,0,99,99,99,0,99,
  //99,0,99,0,99,0,99,0,0,0,99,0,99,0,99,0,0,0,99,99,0,0,99,
  //99,0,99,0,99,0,99,99,99,0,0,99,0,0,99,99,99,0,99,0,99,0,99,
  //99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,
  //99,0,99,99,99,0,99,99,99,0,99,99,99,0,99,99,99,0,0,99,0,0,99,
  //99,0,99,0,0,0,99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,
  //99,0,99,0,99,0,99,0,99,0,99,0,99,2,99,0,99,0,99,99,99,0,99,
  //99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,
  //99,0,99,99,99,0,99,99,99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,
  //99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,
  //99,0,99,99,99,0,99,99,99,0,99,0,99,0,99,99,99,0,99,99,99,99,99,
  //99,0,99,0,0,0,0,99,0,0,99,0,99,0,99,0,0,0,99,99,99,99,99,
  //99,0,99,0,99,0,0,99,0,0,99,0,99,0,99,99,99,0,99,99,1,0,99,
  //99,0,99,0,99,0,0,99,0,0,99,0,99,0,99,0,0,0,99,99,99,0,99,
  //99,0,99,99,99,0,99,99,99,0,0,99,0,0,99,99,99,0,99,99,99,0,99,
  //99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,
  //99,0,99,0,99,0,99,99,99,0,99,0,99,0,99,0,99,0,99,99,99,0,99,
  //99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,
  //99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,0,99,99,99,0,99,
  //99,0,0,99,0,0,99,0,99,0,99,0,99,0,99,0,99,0,99,0,0,0,99,
  //99,99,0,99,0,0,99,99,99,0,99,99,99,0,99,99,99,0,99,0,99,99,99,
  //99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,
  //99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99
  
  //},
  {
  99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,
  99,0,0,0,0,6,0,0,0,0,99,0,0,990,0,5,0,0,0,11,0,6,0,0,0,0,0,6,99,
  99,0,11,0,0,0,0,0,11,0,0,0,0,4,0,0,11,0,0,0,0,0,11,0,0,0,0,0,99,
  99,0,0,99,99,99,99,0,99,99,99,0,0,99,0,99,0,0,99,99,99,0,11,99,99,99,11,11,99,
  99,0,0,99,2,99,4,0,99,6,0,0,0,99,6,99,0,0,99,6,68,0,4,99,820,99,0,11,99,
  99,0,0,99,0,99,0,0,99,99,99,0,0,99,0,99,0,0,99,99,99,11,0,99,99,99,11,0,99,
  99,0,0,99,0,99,0,11,99,0,0,0,0,99,0,99,0,0,99,820,820,0,0,99,99,6,0,11,99,
  99,11,0,99,0,99,0,0,99,99,99,0,0,0,99,3,99,0,99,99,99,0,0,99,0,99,11,11,99,
  99,0,0,4,0,4,0,0,0,99,82,0,0,0,0,11,0,99,0,0,0,0,0,0,0,0,11,0,99,
  99,0,0,0,0,0,69,0,0,99,3,0,4,0,0,0,0,0,99,0,0,4,0,0,0,0,0,0,99,
  99,0,11,99,99,99,0,0,99,99,99,0,0,99,99,99,11,0,99,99,99,0,0,11,990,0,0,0,99,
  99,11,11,99,0,0,0,0,99,820,99,0,0,99,820,99,0,0,99,6,99,0,0,99,6,99,82,0,99,
  99,11,6,99,0,99,0,11,99,820,99,11,0,99,820,99,0,0,99,0,99,0,11,99,99,99,0,0,99,
  99,11,11,99,6,99,0,6,99,820,99,0,0,99,820,99,0,333,99,11,99,0,0,99,820,99,0,4,99,
  99,0,11,99,99,99,0,99,99,99,99,99,3,99,0,99,99,99,99,0,99,0,0,99,820,99,0,6,99,
  99,0,11,11,11,0,0,0,0,6,0,0,99,0,0,0,0,0,0,0,0,0,99,0,0,0,69,99,99,
  99,0,11,11,11,0,0,0,0,0,0,11,99,0,69,0,11,0,0,0,96,99,11,0,0,0,0,0,99,
  99,0,0,99,99,99,909,909,99,99,99,0,99,99,0,99,99,99,99,99,99,909,11,99,99,99,4,0,99,
  99,0,0,99,0,0,0,11,6,99,820,0,0,99,0,99,0,0,99,6,86,0,4,99,99,99,82,82,99,
  99,0,0,99,0,99,0,0,0,99,820,11,0,99,0,99,0,0,99,99,99,11,0,909,1,990,0,11,99,
  99,0,0,99,6,99,0,0,3,99,820,0,0,99,6,99,820,0,99,820,820,0,0,99,99,99,0,4,99,
  99,6,0,99,99,99,0,82,99,99,99,0,0,0,99,820,820,11,99,99,99,0,0,99,99,99,11,0,99,
  99,11,0,4,0,0,0,0,0,0,0,99,96,0,11,0,0,0,0,0,0,0,909,0,0,4,4,0,99,
  99,990,0,0,0,0,0,0,0,11,0,0,99,0,0,0,0,0,0,11,0,99,0,990,82,6,0,420,99,
  99,0,99,0,0,0,333,99,99,99,99,0,0,99,0,99,0,4,99,820,99,11,11,99,99,99,4,0,99,
  99,0,0,99,820,99,99,0,99,820,99,0,0,99,0,99,0,0,99,820,99,11,0,99,820,99,0,0,99,
  99,11,0,99,820,99,0,0,99,820,99,0,11,99,0,99,909,909,99,820,99,11,0,99,99,99,0,0,99,
  99,3,0,0,99,0,0,0,99,6,990,0,3,99,6,99,0,0,99,820,99,0,11,99,11,0,0,6,99,
  99,99,99,0,99,420,4,99,99,99,99,99,99,99,99,99,0,0,99,99,99,11,0,99,0,0,99,99,99,
  99,0,0,0,99,0,6,0,11,0,0,0,11,0,4,0,0,11,0,0,0,82,0,0,0,4,0,820,99,
  99,6,11,0,4,0,11,0,0,0,4,0,0,0,0,11,0,0,0,4,0,0,0,11,0,0,0,820,99,
  99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,
  }
  };
  Tile[] mapTile;
  int length_;
  int num_map;
  int cols;
  int rows;
  
  Map(int level){
    num_map = stageList.length;
    length_ = stageList[level].length;
    mapList = stageList[level];
    cols = 29; 
    rows = 32;
  }
  
  Tile[] createTile(){
    mapTile = new Tile[length_];
    for(int i=0; i< length_; i++){
      mapTile[i] = new Tile(mapList[i]);
    }
    return mapTile;
  }
  
  void randomWall(int i){
    Tile[] neighbor = getNbr(i);
    int count=0;
    for(int j=0; j< 8;j++){
      if(neighbor[j].type == 0) count++;
    }
    
    if(count >= 3){
      for(int j=0; j< 8;j++){
        if(neighbor[j].type == 0){
          neighbor[j].type = 99;
          break;
        }
      }
    }
  }//end randomWall
  
  void randomPath(int i){
    Tile[] neighbor = getNbr(i);
    int count=0;
    for(int j=0; j< 8;j++){
      if(neighbor[j].type == 99) count++;
    }
    
    if(count >= 3){
      for(int j=0; j< 8;j++){
        if(neighbor[j].type == 99){
          neighbor[j].type = 0 ;
          break;
        }
      }
    }
  }//end randomWall
  
  void bomb(int i){
    Tile[] neighbor = getNbr(i); 
    for(int j=0; j< 8;j++){
      neighbor[j].type = 0;
     }
  }
  
  Tile[] getNbr(int i){
    Tile[] neighbor = new Tile[8];
    if(i-cols-1 > 0 && i-cols-1 < 928){
      neighbor[0] = mapTile[i-cols-1];
    }else{
      neighbor[0] = new Tile(9999);
    }
    if(i-cols > 0 && i-cols < 928){
      neighbor[1] = mapTile[i-cols];
    }else{
      neighbor[1] = new Tile(9999);
    }    
    if(i-cols+1 > 0 && i-cols+1 < 928){
      neighbor[2] = mapTile[i-cols+1];
    }else{
      neighbor[2] = new Tile(9999);
    }
    
    if(i-1 > 0 && i-1 < 928){
      neighbor[3] = mapTile[i-1];
    }else{
      neighbor[3] = new Tile(9999);
    }
    if(i+1 > 0 && i+1 < 928){
      neighbor[4] = mapTile[i+1];
    }else{
      neighbor[4] = new Tile(9999);
    }
    
    if(i+1 > 0 && i+1 < 928){
      neighbor[5] = mapTile[i+cols-1];
    }else{
      neighbor[5] = new Tile(9999);
    }
    if(i+1 > 0 && i+1 < 928){
      neighbor[6] = mapTile[i+cols];
    }else{
      neighbor[6] = new Tile(9999);
    }
    if(i+1 > 0 && i+1 < 928){
      neighbor[7] = mapTile[i+cols+1];
    }else{
      neighbor[7] = new Tile(9999);
    }
    return neighbor;
  }
  
  int[] neiIndex(int i){
    int[] index = new int[8];
    if(i-cols-1 > 0 && i-cols-1 < 928){
      index[0] = i-cols-1;
    }else{
      index[0] = 9999;
    }
    if(i-cols > 0 && i-cols < 928){
      index[1] = i-cols;
    }else{
      index[1] = 9999;
    }    
    if(i-cols+1 > 0 && i-cols+1 < 928){
      index[2] = i-cols+1;
    }else{
      index[2] = 9999;
    }
    
    if(i-1 > 0 && i-1 < 928){
      index[3] = i-1;
    }else{
      index[3] = 9999;
    }
    if(i+1 > 0 && i+1 < 928){
      index[4] = i+1;
    }else{
      index[4] = 9999;
    }
    
    if(i+1 > 0 && i+1 < 928){
      index[5] = i+cols-1;
    }else{
      index[5] = 9999;
    }
    if(i+1 > 0 && i+1 < 928){
      index[6] = i+cols;
    }else{
      index[6] = 9999;
    }
    if(i+1 > 0 && i+1 < 928){
      index[7] = i+cols+1;
    }else{
      index[7] = 9999;
    }    
    return index;
  }
  
}
