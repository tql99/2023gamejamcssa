class Map {
  int [] map = {
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,
    -1,0,-1,-1,-1,0,-1,-1,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,-1,-1,0,-1,
    -1,0,-1,1,-1,0,-1,0,0,0,-1,0,-1,0,-1,0,0,0,-1,0,-1,0,-1,
    -1,0,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,-1,-1,0,-1,
    -1,0,-1,0,-1,0,-1,0,0,0,-1,0,-1,0,-1,0,0,0,-1,-1,0,0,-1,
    -1,0,-1,0,-1,0,-1,-1,-1,0,0,-1,0,0,-1,-1,-1,0,-1,0,-1,0,-1,
    -1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,
    -1,0,-1,-1,-1,0,-1,-1,-1,0,-1,-1,-1,0,-1,-1,-1,0,0,-1,0,0,-1,
    -1,0,-1,0,0,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
    -1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
    -1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
    -1,0,-1,-1,-1,0,-1,-1,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
    -1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,
    -1,0,-1,-1,-1,0,-1,-1,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,-1,-1,-1,-1,
    -1,0,-1,0,0,0,0,-1,0,0,-1,0,-1,0,-1,0,0,0,-1,-1,-1,-1,-1,
    -1,0,-1,0,-1,0,0,-1,0,0,-1,0,-1,0,-1,-1,-1,0,-1,-1,99,0,-1,
    -1,0,-1,0,-1,0,0,-1,0,0,-1,0,-1,0,-1,0,0,0,-1,-1,-1,0,-1,
    -1,0,-1,-1,-1,0,-1,-1,-1,0,0,-1,0,0,-1,-1,-1,0,-1,-1,-1,0,-1,
    -1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,
    -1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,
    -1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
    -1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,
    -1,0,0,-1,0,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,0,0,-1,
    -1,-1,0,-1,0,0,-1,-1,-1,0,-1,-1,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,
    -1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
  };
  int block_x = 50;
  int block_y = 50;
  int rows = 27;
  int cols = 23;
  int mapW = block_x * cols;
  int mapH = block_y * rows;
  int startX = 0;
  int startY = 0;


  
  //Map(int mapW, int mapH){
  //}
  
void move_map(int mapX, int mapY){
  pushMatrix();
  translate(mapX,mapY);
  render_map();
  popMatrix();
}

void render_map(){
    fill(150, 80, 10);
    rect(0,0,mapW,mapH);
    stroke(0, 0, 0, 0);
    //int lineFrequency = 100;
    //for(int i = 1; i < mapW/lineFrequency;  i ++)
    //{
    //  line(i*lineFrequency, 0, i*lineFrequency, mapW);
    //  line(0, i*lineFrequency, mapH, i*lineFrequency);
    //}
    
    // Draw obstacles
    for(int i = 0; i < map.length;  i ++){
      if (map[i] == -1)         fill(153,76,0);
      else if (map[i] == 0)     fill(255,255,255);
      else if (map[i] == 99)    fill(51,255,51);
      else if (map[i] == 1)    {
        startX = i%cols*block_y;
        startY = (int)(i/cols)*block_x;
        fill(0,204,204);
      }

      //else
      rect(i%cols*block_y,(int)(i/cols)*block_x, block_x, block_y);
    }
    //stroke(0, 0, 0, 255);//reset stroke to normal
}
  

  


}
